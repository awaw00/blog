<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[一个小巧的Typing库]]></title>
      <url>http://blog.allstack.win/2016/08/21/%E5%81%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B7%A7%E7%9A%84Typing%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>看到了一个站点：<a href="http://anyway.fm/" target="_blank" rel="external">Anyway.FM</a>，发现其顶部的打字动画非常有意思，寻思着怎样实现一个 Typing 库。</p>
<h1 id="Typing-库的构思"><a href="#Typing-库的构思" class="headerlink" title="Typing 库的构思"></a>Typing 库的构思</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>Typing 是用于模拟打字动作的一个类库</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>打字一般是这样一个过程：输入文本 - 停顿 - 退格（删除） - 继续输入 。。。<br>那么 Typing 库应该包含如下功能：</p>
<ul>
<li>将一段文本的内容以字符为单位逐一显示出来</li>
<li>可以模拟打字光标</li>
<li>可以退格</li>
<li>可以控制打字的速度</li>
<li>可以模拟打字停顿</li>
</ul>
<h1 id="Typing-库的实现"><a href="#Typing-库的实现" class="headerlink" title="Typing 库的实现"></a>Typing 库的实现</h1><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>我们先来实现一个文本逐一显示的小功能。<br>这个功能并不复杂，可以给方法传入一个dom元素和一个字符串，方法中将字符串分割为一个字符数组，并使用<code>setInterval</code>来把一个一个字符逐一显示在元素中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">typing</span> (<span class="params">el, str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> chars = str.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    el.innerText = el.innerText + chars[i++];</div><div class="line">    <span class="keyword">if</span> (i === chars.length) &#123;</div><div class="line">      clearInterval(timer);</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">200</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看一下demo：<br><iframe src="//codepen.io/awaw00/embed/PzggGB/?height=265&theme-id=dark&default-tab=js,result&embed-version=2" width="100%" height="300" frameborder="0" allowfullscreen></iframe></p>
<p>吼吼~ 文字以200毫秒的速度打印出来了！</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>正如上文中说的，打字是一个过程，我们的库应该能够像流水线一样模拟打字的每个步骤：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">typing.play(<span class="string">'我是一句文字。'</span>); <span class="comment">// 打字</span></div><div class="line">typing.wait(<span class="number">1000</span>);            <span class="comment">// 停顿</span></div><div class="line">typing.play(<span class="string">'错误的文字'</span>);     <span class="comment">// 打字</span></div><div class="line">typing.back(<span class="number">5</span>);               <span class="comment">// 退格</span></div><div class="line">typing.wait(<span class="number">1000</span>);            <span class="comment">// 思考</span></div><div class="line">typing.play(<span class="string">'正确的文字'</span>);     <span class="comment">// 继续打字</span></div></pre></td></tr></table></figure></p>
<p>还可以更优雅一点：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">typing</div><div class="line">  .play(<span class="string">'我是一句文字。'</span>)</div><div class="line">  .wait(<span class="number">1000</span>)</div><div class="line">  .play(...)</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>一个typing应该是针对一个dom元素进行一系列的模拟操作，我们可以设计一个Typing类，一个typing就是一个Typing类的实例对象，每个对象都保存它所操作的dom节点、默认速度等这些值。<br>此外，每个步骤可以指定模拟操作的速度，让模拟过程更加自然。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">//=================== 类的私有方法 ===================</span></div><div class="line"></div><div class="line">  <span class="comment">// 更新内容</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateContent</span> (<span class="params">content, renderCursor</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> renderCursor === <span class="string">'undefined'</span>) &#123;</div><div class="line">      renderCursor = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.renderedText = content;</div><div class="line">    <span class="keyword">if</span> (renderCursor) &#123;</div><div class="line">      content += <span class="keyword">this</span>.cursorHTML;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.el.innerHTML = content;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 等待</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      nextTask.call(that);</div><div class="line">    &#125;, time)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 退格</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params">count, speed</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</div><div class="line">      count = <span class="keyword">this</span>.renderedText.length</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      count = <span class="keyword">this</span>.renderedText.length &gt; count ? count : <span class="keyword">this</span>.renderedText.length;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      updateContent.call(that, that.renderedText.substring(<span class="number">0</span>, that.renderedText.length - <span class="number">1</span>));</div><div class="line">      i++;</div><div class="line">      <span class="keyword">if</span> (i == count) &#123;</div><div class="line">        clearInterval(timer);</div><div class="line">        nextTask.call(that);</div><div class="line">      &#125;</div><div class="line">    &#125;, speed || that.speed)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 打字</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">text, speed</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> chars = text.split(<span class="string">''</span>);</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      updateContent.call(that, that.renderedText + chars[i++]);</div><div class="line">      <span class="keyword">if</span> (i === chars.length) &#123;</div><div class="line">        clearInterval(timer);</div><div class="line">        nextTask.call(that);</div><div class="line">      &#125;</div><div class="line">    &#125;, speed || that.speed)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 为了实现按序完成每个步骤，我们需要维护一个任务列表</div><div class="line">   * 在实例对象调用 play wait 等方法时，会把操作的名称、参数保存到 tasks 数组中</div><div class="line">   * 执行任务时，根据操作名称与参数调用真正的方法来完成模拟操作</div><div class="line">  */</div><div class="line">  <span class="comment">// 添加任务</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addTask</span>(<span class="params">name, args</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.tasks.push(&#123;name: name, args: args&#125;);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.tasks.length === <span class="number">1</span>) &#123;</div><div class="line">      invokeTask.call(<span class="keyword">this</span>, <span class="keyword">this</span>.tasks[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 执行任务</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">invokeTask</span>(<span class="params">task</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = task.name;</div><div class="line">    <span class="keyword">var</span> args = task.args;</div><div class="line">    <span class="keyword">switch</span> (name) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'play'</span>: </div><div class="line">        play.apply(<span class="keyword">this</span>, args);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'back'</span>:</div><div class="line">        back.apply(<span class="keyword">this</span>, args);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'wait'</span>:</div><div class="line">        wait.apply(<span class="keyword">this</span>, args);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 执行下一个任务</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nextTask</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.tasks.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.tasks.length === <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    invokeTask.call(<span class="keyword">this</span>, <span class="keyword">this</span>.tasks[<span class="number">0</span>]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 构造函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Typing</span> (<span class="params">el, speed</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.el = el;</div><div class="line">    <span class="keyword">this</span>.speed = speed || <span class="number">130</span>;</div><div class="line">    <span class="keyword">this</span>.renderedText = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.cursorHTML = <span class="string">'&lt;span class="cursor" /&gt;'</span>;</div><div class="line">    <span class="keyword">this</span>.tasks = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// play 方法，本质是在任务列表添加了一个任务</span></div><div class="line">  Typing.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params">text, speed</span>) </span>&#123;</div><div class="line">    addTask.call(<span class="keyword">this</span>, <span class="string">'play'</span>, <span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// back 方法，同上</span></div><div class="line">  Typing.prototype.back = <span class="function"><span class="keyword">function</span> (<span class="params">count, speed</span>) </span>&#123;</div><div class="line">    addTask.call(<span class="keyword">this</span>, <span class="string">'back'</span>, <span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// wait 方法，同上</span></div><div class="line">  Typing.prototype.wait = <span class="function"><span class="keyword">function</span> (<span class="params">time</span>) </span>&#123;</div><div class="line">    addTask.call(<span class="keyword">this</span>, <span class="string">'wait'</span>, <span class="built_in">arguments</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 暴露 Typing 类到全局环境</span></div><div class="line">  global.Typing = Typing;</div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure>
<p>最后来试一试吧~~<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> typing = <span class="keyword">new</span> Typing(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</div><div class="line">typing</div><div class="line">  .play(<span class="string">'大家好，我是王小贱'</span>, <span class="number">130</span>)</div><div class="line">  .back(<span class="number">3</span>, <span class="number">300</span>)</div><div class="line">  .play(<span class="string">'王一韬'</span>, <span class="number">200</span>)</div><div class="line">  .play(<span class="string">'~~~'</span>, <span class="number">100</span>)</div><div class="line">  .wait(<span class="number">1000</span>)</div><div class="line">  .back(<span class="number">0</span>, <span class="number">100</span>)</div><div class="line">  .play(<span class="string">'我要，'</span>, <span class="number">200</span>)</div><div class="line">  .wait(<span class="number">1200</span>)</div><div class="line">  .play(<span class="string">'用JavaScript，'</span>, <span class="number">100</span>)</div><div class="line">  .wait(<span class="number">200</span>)</div><div class="line">  .play(<span class="string">'赚点零花钱。'</span>, <span class="number">120</span>)</div><div class="line">  .back(<span class="number">6</span>, <span class="number">80</span>)</div><div class="line">  .wait(<span class="number">1000</span>)</div><div class="line">  .play(<span class="string">'改变世界'</span>, <span class="number">500</span>)</div><div class="line">  .play(<span class="string">'!!!'</span>, <span class="number">100</span>)</div></pre></td></tr></table></figure></p>
<iframe src="//codepen.io/awaw00/embed/EyJOmB/?height=265&theme-id=dark&default-tab=js,result&embed-version=2" width="100%" height="300" frameborder="0" allowfullscreen></iframe>
<p>大功告成！！！</p>
]]></content>
    </entry>
    
  
  
</search>
